import java_cup.runtime.*;

// Set up scanner

parser code {:
	ToyScanner scanner;
	
	Parser(ToyScanner scanner) {
		this.scanner = scanner;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) {
		System.out.println("[reject]");
		done_parsing();
	}
:}

scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal	_boolean, _double, _int, _string;
terminal	_if, _else, _for, _while;
terminal	_intconstant, _doubleconstant, _stringconstant, _booleanconstant;
terminal	_plus, _minus, _multiplication, _division, _mod;
terminal	_leftparen, _rightparen, _leftbracket, _rightbracket, _leftbrace, _rightbrace;
terminal	_less, _lessequal, _greater, _greaterequal, _equal, _notequal;
terminal	_and, _or, _not;
terminal	_assignop, _semicolon, _comma, _period;
terminal	_break, _class, _extends, _implements, _interface, _newarray;
terminal	_println, _readln, _return, _void;
terminal	_id;

/* Non terminals */
non terminal	Program, Decls, Decl;
non terminal	VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl;
non terminal	Variable, Type, Formals, Variables, Extends, Implements, Implement;
non terminal	Field, Fields, Prototype, StmtBlock, VariableDecls, Stmts, Stmt;
non terminal	OptionExpr, WhileStmt, ForStmt, BreakStmt;
non terminal	ReturnStmt, PrintStmt, Expr, Exprs, Lvalue, Call, Actuals, Constant;
non terminal	IfStmt;

/* Precedences */
precedence left _assignop;
precedence left _or;
precedence left _and;
precedence left _equal, _notequal;
precedence left _less, _lessequal, _greater, _greaterequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not;
precedence left _leftbracket, _period;
precedence left _else;

/* Toy grammar */
start with Program;

Program ::= Decls 	{: 	System.out.println("[reduce 1]");
									System.out.println("[accept]"); 
									done_parsing(); :};

Decls ::= Decl				{: System.out.println("[reduce 2]"); :} 
			| Decl Decls		{: System.out.println("[reduce 2]"); :} ;

Decl ::= VariableDecl 	{: System.out.println("[reduce 3]"); :} 
			| FunctionDecl 	{: System.out.println("[reduce 3]"); :} 
			| ClassDecl 		{: System.out.println("[reduce 3]"); :} 
			| InterfaceDecl	{: System.out.println("[reduce 3]"); :} ;

VariableDecl ::= Variable _semicolon	{: System.out.println("[reduce 4]"); :} ;

Variable ::= Type _id	{: System.out.println("[reduce 5]"); :} ;

Type ::= _int 												{: System.out.println("[reduce 6]"); :} 
			| _double 										{: System.out.println("[reduce 6]"); :} 
			| _boolean 									{: System.out.println("[reduce 6]"); :} 
			| _string 										{: System.out.println("[reduce 6]"); :} 
			| Type _leftbracket _rightbracket 	{: System.out.println("[reduce 6]"); :} 
			| _id												{: System.out.println("[reduce 6]"); :} ;

FunctionDecl ::= Type _id _leftparen Formals _rightparen StmtBlock 	{: System.out.println("[reduce 7]"); :} 
						| _void _id _leftparen Formals _rightparen StmtBlock	{: System.out.println("[reduce 7]"); :} ;
						
Formals ::=  									{: System.out.println("[reduce 8]"); :} 
					| Variables				{: System.out.println("[reduce 8]"); :} ;

Variables ::= Variable					{: System.out.println("[reduce 9]"); :}  
					| Variable Variables	{: System.out.println("[reduce 9]"); :} ;

ClassDecl ::= _class _id Extends Implements _leftbrace Fields _rightbrace	{: System.out.println("[reduce 10]"); :} ;

Extends ::=  									{: System.out.println("[reduce 11]"); :}
					| _extends _id			{: System.out.println("[reduce 11]"); :};

Implements ::= 								{: System.out.println("[reduce 12]"); :}
						| Implement			{: System.out.println("[reduce 12]"); :};

Implement ::= _implements _id 									{: System.out.println("[reduce 13]"); :}
					| _implements _id _comma Implement		{: System.out.println("[reduce 13]"); :};

Fields ::= 							{: System.out.println("[reduce 14]"); :}
				| Field Fields		{: System.out.println("[reduce 14]"); :};

Field ::= VariableDecl			{: System.out.println("[reduce 15]"); :} 
			| FunctionDecl		{: System.out.println("[reduce 15]"); :};

InterfaceDecl ::= _interface _id _leftbrace Prototype _rightbrace						{: System.out.println("[reduce 16]"); :};

Prototype ::= 																								{: System.out.println("[reduce 17]"); :}
					| Type _id _leftparen Formals _rightparen _semicolon Prototype 	{: System.out.println("[reduce 17]"); :}
					| _void _id _leftparen Formals _rightparen _semicolon Prototype	{: System.out.println("[reduce 17]"); :};
					
StmtBlock ::= _leftbrace VariableDecls Stmts _rightbrace	{: System.out.println("[reduce 18]"); :};

VariableDecls ::= 																{: System.out.println("[reduce 19]"); :}
							| VariableDecl VariableDecls					{: System.out.println("[reduce 19]"); :};

Stmts ::= 									{: System.out.println("[reduce 20]"); :}
				| Stmt Stmts				{: System.out.println("[reduce 20]"); :};

Stmt ::= OptionExpr _semicolon 	{: System.out.println("[reduce 21]"); :}
			| IfStmt 						{: System.out.println("[reduce 21]"); :}
			| WhileStmt 					{: System.out.println("[reduce 21]"); :}
			| ForStmt 						{: System.out.println("[reduce 21]"); :}
			| BreakStmt 					{: System.out.println("[reduce 21]"); :}
			| ReturnStmt 					{: System.out.println("[reduce 21]"); :}
			| PrintStmt 					{: System.out.println("[reduce 21]"); :}
			| StmtBlock					{: System.out.println("[reduce 21]"); :};

IfStmt ::= _if _leftparen Expr _rightparen Stmt								{: System.out.println("[reduce 22]"); :} 
				|  _if _leftparen Expr _rightparen Stmt _else Stmt		{: System.out.println("[reduce 22]"); :}; 

WhileStmt ::= _while _leftparen Expr _rightparen Stmt					{: System.out.println("[reduce 23]"); :};

ForStmt ::= _for _leftparen OptionExpr _semicolon Expr _semicolon OptionExpr _rightparen Stmt	{: System.out.println("[reduce 24]"); :};

BreakStmt ::= _break _semicolon						{: System.out.println("[reduce 25]"); :};

ReturnStmt ::= _return OptionExpr _semicolon		{: System.out.println("[reduce 26]"); :};

PrintStmt ::= _println _leftparen Exprs _rightparen _semicolon		{: System.out.println("[reduce 27]"); :};

Expr ::= Lvalue _assignop Expr 				{: System.out.println("[reduce 28]"); :}
			| Constant 								{: System.out.println("[reduce 28]"); :}
			| Lvalue 									{: System.out.println("[reduce 28]"); :}
			| Call 										{: System.out.println("[reduce 28]"); :}
			| _leftparen Expr _rightparen 		{: System.out.println("[reduce 28]"); :}
			| Expr _plus Expr 						{: System.out.println("[reduce 28]"); :}
			| Expr _minus Expr 					{: System.out.println("[reduce 28]"); :}
			| Expr _multiplication Expr 			{: System.out.println("[reduce 28]"); :}
			| Expr _division Expr 					{: System.out.println("[reduce 28]"); :}
			| Expr _mod Expr 						{: System.out.println("[reduce 28]"); :}
			| _minus Expr   							{: System.out.println("[reduce 28]"); :} 	%prec _not
			| Expr _less Expr 						{: System.out.println("[reduce 28]"); :}
			| Expr _lessequal Expr 				{: System.out.println("[reduce 28]"); :}
			| Expr _greater Expr 					{: System.out.println("[reduce 28]"); :}
			| Expr _greaterequal Expr 			{: System.out.println("[reduce 28]"); :}
			| Expr _equal Expr 					{: System.out.println("[reduce 28]"); :}
			| Expr _notequal Expr 				{: System.out.println("[reduce 28]"); :}
			| Expr _and Expr 						{: System.out.println("[reduce 28]"); :}
			| Expr _or Expr 							{: System.out.println("[reduce 28]"); :}
			| _not Expr 								{: System.out.println("[reduce 28]"); :}
			| _readln _leftparen _rightparen 	{: System.out.println("[reduce 28]"); :}
			| _newarray _leftparen _intconstant _comma Type _rightparen			{: System.out.println("[reduce 28]"); :};
			
Lvalue ::= _id 																{: System.out.println("[reduce 29]"); :}
				| Lvalue _leftbracket Expr _rightbracket 			{: System.out.println("[reduce 29]"); :}
				| Lvalue _period _id										{: System.out.println("[reduce 29]"); :};

Call ::= _id _leftparen Actuals _rightparen 						{: System.out.println("[reduce 30]"); :}
			| _id _period _id _leftparen Actuals _rightparen	{: System.out.println("[reduce 30]"); :};

Actuals ::=									{: System.out.println("[reduce 31]"); :} 
				| Exprs							{: System.out.println("[reduce 31]"); :};

Exprs ::= Expr 								{: System.out.println("[reduce 32]"); :}
				| Expr _comma Exprs		{: System.out.println("[reduce 32]"); :};

Constant ::= _intconstant 				{: System.out.println("[reduce 33]"); :}
					| _doubleconstant 		{: System.out.println("[reduce 33]"); :}
					| _stringconstant 		{: System.out.println("[reduce 33]"); :}
					| _booleanconstant	{: System.out.println("[reduce 33]"); :};
