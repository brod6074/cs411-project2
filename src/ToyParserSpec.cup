import java_cup.runtime.*;

/* Set up scanner
// init with {: scanner.init(); :};
// scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal	_boolean, _double, _int, _string;
terminal	_if, _else, _for, _while;
terminal	_intconstant, _doubleconstant, _stringconstant, _booleanconstant;
terminal	_plus, _minus, _multiplication, _division, _mod;
terminal	_leftparen, _rightparen, _leftbracket, _rightbracket, _leftbrace, _rightbrace;
terminal	_less, _lessequal, _greater, _greaterequal, _equal, _notequal;
terminal	_and, _or, _not;
terminal	_assignop, _semicolon, _comma, _period;
terminal	_break, _class, _extends, _implements, _interface, _newarray;
terminal	_println, _readln, _return, _void;
terminal	_id;

/* Non terminals */
non terminal	Program, Decls, Decl;
non terminal	VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl;
non terminal	Variable, Type, Formals, Variables, Extends, Implements, Implement;
non terminal	Field, Fields, Prototype, StmtBlock, VariableDecls, Stmts, Stmt;
non terminal	OptionExpr, WhileStmt, ForStmt, BreakStmt;
non terminal	ReturnStmt, PrintStmt, Expr, Exprs, Lvalue, Call, Actuals, Constant;
non terminal	IfStmt;

/* Precedences */
precedence left _assignop;
precedence left _or;
precedence left _and;
precedence left _equal, _notequal;
precedence left _less, _lessequal, _greater, _greaterequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not;
precedence left _leftbracket, _period;
precedence left _else;

/* Toy grammar */
start with Program;

Program ::= Decls;

Decls ::= Decl | Decl Decls;

Decl ::= VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl;

VariableDecl ::= Variable _semicolon;

Variable ::= Type _id;

Type ::= _int | _double | _boolean | _string | Type _leftbracket _rightbracket | _id;

FunctionDecl ::= Type _id _leftparen Formals _rightparen StmtBlock |
						_void _id _leftparen Formals _rightparen StmtBlock;
						
Formals ::=  | Variables;

Variables ::= Variable | Variable Variables;

ClassDecl ::= _class _id Extends Implements _leftbrace Fields _rightbrace;

Extends ::=  | _extends _id;

Implements ::= | Implement;

Implement ::= _implements _id | _implements _id _comma Implement;

Fields ::= | Field Fields;

Field ::= VariableDecl | FunctionDecl;

InterfaceDecl ::= _interface _id _leftbrace Prototype _rightbrace;

Prototype ::= | Type _id _leftparen Formals _rightparen _semicolon Prototype |
					_void _id _leftparen Formals _rightparen _semicolon Prototype;
					
StmtBlock ::= _leftbrace VariableDecls Stmts _rightbrace;

VariableDecls ::= | VariableDecl VariableDecls;

Stmts ::= | Stmt Stmts;

Stmt ::= OptionExpr _semicolon | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt |
			PrintStmt | StmtBlock;

IfStmt ::= _if _leftparen Expr _rightparen Stmt | 
				_if _leftparen Expr _rightparen Stmt _else Stmt; 

WhileStmt ::= _while _leftparen Expr _rightparen Stmt;

ForStmt ::= _for _leftparen OptionExpr _semicolon Expr _semicolon OptionExpr _rightparen Stmt;

BreakStmt ::= _break _semicolon;

ReturnStmt ::= _return OptionExpr _semicolon;

PrintStmt ::= _println _leftparen Exprs _rightparen _semicolon;

Expr ::= Lvalue _assignop Expr | Constant | Lvalue | Call | _leftparen Expr _rightparen |
			Expr _plus Expr | Expr _minus Expr | Expr _multiplication Expr | Expr _division Expr |
			Expr _mod Expr | _minus Expr  %prec _not | Expr _less Expr | Expr _lessequal Expr |
			Expr _greater Expr | Expr _greaterequal Expr | Expr _equal Expr | Expr _notequal Expr |
			Expr _and Expr | Expr _or Expr | _not Expr | _readln _leftparen _rightparen |
			_newarray _leftparen _intconstant _comma Type _rightparen;
			
Lvalue ::= _id | Lvalue _leftbracket Expr _rightbracket | Lvalue _period _id;

Call ::= _id _leftparen Actuals _rightparen | _id _period _id _leftparen Actuals _rightparen;

Actuals ::= | Exprs;

Exprs ::= Expr | Expr _comma Exprs;

Constant ::= _intconstant | _doubleconstant | _stringconstant | _booleanconstant;
